The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

>>> add_integer = __import__("0-add_integer").add_integer

checking for module docstring
::
        >>> mod_string = __import__("0-add_integer").__doc__
        >>> len(mod_string) > 5
        True

checking for function docstring
::
        >>> fun_docs = add_integer.__doc__
        >>> len(fun_docs) > 5
        True

checking addition of positive integer
::
        >>> add_integer(3, 2)
        5
        >>> add_integer(20000, 40000)
        60000

checking addition of negative integers
::
        >>> add_integer(-4, -2)
        -6

checking addition of both positive and negative integers
::
        >>> add_integer(1, -3)
        -2

checking addition of floats
::
        >>> add_integer(2.43, 0.32)
        2
        >>> add_integer(4.0/2.0, 5)
        7
        >>> add_integer(5.0, float("nan"))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer
        >>> add_integer(float("inf"), 3)
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

checking addition of strings
::
        >>> add_integer(" ", 5)
        Traceback (most recent call last):
        TypeError: a must be an integer
        >>> add_integer("cup")
        Traceback (most recent call last):
        TypeError: a must be an integer
        >>> add_integer(20, "ten")
        Traceback (most recent call last):
        TypeError: b must be an integer

checking addition of lists
::
        >>> add_integer(1, [])
        Traceback (most recent call last):
        TypeError: b must be an integer
        >>> add_integer([2, 1, 4], [1,2,3])
        Traceback (most recent call last):
        TypeError: a must be an integer

checking addition of dictionarys
::
        >>> add_integer({"add": 3}, float(5))
        Traceback (most recent call last):
        TypeError: a must be an integer

checking addition of boolean values
